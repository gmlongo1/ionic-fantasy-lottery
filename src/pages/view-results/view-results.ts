import { EmailComposer } from '@ionic-native/email-composer';
import { AuthService } from './../../providers/auth-service/auth-service';
import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams, LoadingController, ToastController } from 'ionic-angular';

import firebase from 'firebase'

/**
 * Generated class for the ViewResultsPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
@IonicPage()
@Component({
  selector: 'page-view-results',
  templateUrl: 'view-results.html',
})
export class ViewResultsPage {

  generationDone = false;

  leagueId: string;
  season: string;
  name: string;
  owner: string;
  email: string;
  draftOrderGen: string;
  teams: any = [];

  constructor(public navCtrl: NavController, public navParams: NavParams, public loadingCtrl: LoadingController, public toastCtrl: ToastController, public emailComposer: EmailComposer, public authService: AuthService) {
  }

  ionViewWillEnter() {
    let loading = this.loadingCtrl.create({
      content: 'Generating draft order...'
    });
    loading.present();

    this.leagueId = this.navParams.get('leagueId');
    let user = this.authService.getUser();

    // fetch league information
    let leagueRef = firebase.database().ref('/users/' + user.uid + '/leagues/' + this.leagueId)
    leagueRef.once('value', 
      data => {
        this.season = data.val().season,
        this.name = data.val().name,
        this.owner = data.val().owner,
        this.email = data.val().email,
        this.draftOrderGen = data.val().draftOrderGen
      }
    )

    // fetch teams
    let teamsRef = firebase.database().ref('/users/' + user.uid + '/teams').orderByChild('leagueId').equalTo(this.leagueId);
    let t = [];

    teamsRef.once('value',
      snapshot => {
        snapshot.forEach((childSnapshot) => {
          var childKey = childSnapshot.key;
          var val = childSnapshot.val();
          t.push({
            key: childKey,
            name: val.name,
            email: val.email,
            owner: val.owner,
            draftOrder: val.draftOrder,
            previousFinish: val.previousFinish
          });

          return false;
        });

        t.sort(
          (a, b) => {
            if (a.draftOrder < b.draftOrder)
              return -1
            if (a.draftOrder > b.draftOrder)
              return 1
            return 0
          }
        )
      });

      let index = 0;
      let interval = setInterval(() => {
        if (this.teams.length == t.length) {
          clearInterval(interval);
          this.generationDone = true;
          loading.dismiss();
        } else
          this.teams[index] = t[index++];
      }, 1000);
  }

  onEmailResults() {
    let genDate = new Date(this.draftOrderGen);

    //let recipients = ['gmlongo@live.com, gmlongo@gmail.com'];
    let recipients = [];

    // add owner's email
    recipients.push(this.email);

    // add each team owner's email
    this.teams.forEach(team => {
      recipients.push(team.email);
    });

    let subject = `${this.name} ${this.season} Generated Draft Order`;
    let content: string = this.name + " " + this.season + " draft order:\n\n";
    
    this.teams.forEach((item, index) => {
      content += (index+1) + ". " + item.name + "\n";
    });

    content = content.concat("\nGenerated by Fantasy Draft Lottery on ").concat(genDate.toLocaleString());

    console.log(content);

    this.emailComposer.isAvailable().then(() => {
        let email = {
          to: recipients,
          subject: subject,
          body: content,
          isHtml: false
        };

        // Send a text email message using default options
        this.emailComposer.open(email);
      }).catch(() => {
        // email is unavailable
        let toast = this.toastCtrl.create({
          message: "Email is not available",
          duration: 3000,
          position: 'top'
        });
        toast.present();
      });
  }
}
